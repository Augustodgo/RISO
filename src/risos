#!/bin/bash

#Variáveis do script
dir_riso=/usr/riso
dir_img=$dir_riso/imagens
img_win=$dir_img/windows.img
img_lin=$dir_img/linux.tar
img_rec=$dir_img/rec.tar
tor_win=$img_win.torrent
tor_lin=$img_lin.torrent
riso_service=/etc/avahi/services/riso.service
tab_part=$dir_img/tab_part

#Carrega variaveis do arquivo riso.service para variáveis do sistema.
carrega_variaveis() {

    avahi_saida=`avahi-browse -rtp _RISO._tcp | grep '='`
    servidor=`cut -d ';' -f8 <<< ${avahi_saida}` #ip do servidor.
    if [ -z $servidor ]; then
        dialog \
        --title 'Atencao' \
        --ok-label 'OK' \
        --msgbox 'O servidor RISOS precisa estar conectado à rede.\nVerifique a conexão e tente novamente.' \
        7 45
        return 1
    fi
    partwindows=`(cut -d ';' -f10 | cut -d '"' -f2 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição com Windows.
    partlinux=`(cut -d ';' -f10 | cut -d '"' -f4 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição com Linux.
    partrec=`(cut -d ';' -f10 | cut -d '"' -f6 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição de Recuperação.
    partswap=`(cut -d ';' -f10 | cut -d '"' -f8 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição Swap.

    #Tamanho total das imagens criadas no servidor.
    tamwindows=`(cut -d ';' -f10 | cut -d '"' -f10 | cut -d '=' -f2) <<< ${avahi_saida}`
    tamlinux=`(cut -d ';' -f10 | cut -d '"' -f12 | cut -d '=' -f2) <<< ${avahi_saida}`

    #Sistema de arquivo das partições.
    sa_partwindows=`(cut -d ';' -f10 | cut -d '"' -f14 | cut -d '=' -f2) <<< ${avahi_saida}`
    sa_partlinux=`(cut -d ';' -f10 | cut -d '"' -f16 | cut -d '=' -f2) <<< ${avahi_saida}`
    sa_partrec=`(cut -d ';' -f10 | cut -d '"' -f18 | cut -d '=' -f2) <<< ${avahi_saida}`
}

#Inicia tracker para disponibilizar imagens na rede.
inicia_servidor() {
	if [ -e ${img_win} -a -e ${img_lin} ]; then
		bttrack --port 6969 --dfile dstate | grep pog &
		cd ${dir_img}	
		rtorrent ${tor_lin} ${tor_win}
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\n   Não existem imagens prontas.' \
		7 40
		return 2
	fi
	
}

#Inicia tracker para disponibilizar imagem do Windows na rede.
inicia_servidor_windows() {
	if [ -e ${img_win} ]; then
		bttrack --port 6969 --dfile dstate | grep pog &
		cd ${dir_img}
		rtorrent ${tor_win}
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\nVocê ainda não criou a imagem do windows.' \
		7 45
		return 2
	fi
	
}

#Inicia tracker para disponibilizar imagem do Linux na rede.
inicia_servidor_linux() {
	if [ -e ${img_lin} ]; then
		bttrack --port 6969 --dfile dstate | grep laialadaiasabadanaavemaria &
		cd ${dir_img}		
		rtorrent ${tor_lin}
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\nVocê ainda não criou a imagem do linux.' \
		7 44
		return 2
	fi

}

#Cria imagem do Linux.
cria_linux() {

	echo "Removendo imagem antiga do linux..."
	rm -f ${img_lin}
	rm -f ${tor_lin}
	
	#Cria arquivo .tar do linux
	umount /mnt 2> /dev/null
	mount ${partlinux} /mnt
	cd /mnt
	tar -cvf ${img_lin} *
	
	#Atualiza Sistema de arquivo da partição no riso.service
	sa_partlinux=`df -T ${partlinux} | awk 'NR==2{print $2}'`
	sed "s/sa_partlinux=[^<]*/sa_partlinux=${sa_partlinux}/" < ${riso_service} > ${riso_service}.tmp
	
	umount /mnt 2> /dev/null
	
}

cria_torrent_linux() {
	
	if [ -e $img_lin ]; then
	    #Cria o torrent
	    btmakemetafile.bittorrent ${img_lin} http://${servidor}:6969/announce 2> /dev/null
	
	    #Escreve o tamanho da imagem no riso.service
	    tam=`du -b ${img_lin} | cut -f1`
	    sed "s/tamlinux=[0-9]*/tamlinux=${tam}/" < ${riso_service} > ${riso_service}.tmp
	    mv ${riso_service}.tmp ${riso_service}
	else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\nVocê ainda não criou a imagem do linux.' \
        7 44
        return 2
	fi
	
}

#Cria imagem do Windows.
cria_windows() {
	
	echo "Removendo imagem antiga do windows..."
	rm -f ${img_win}
    rm -f ${tor_win}

    #Cria arquivo .img do windows
    umount ${partwindows} 2> /dev/null
    ntfsclone -s -O ${img_win} ${partwindows}
    
    #Se não conseguiu criar a imagem
    if [ "$?" -ne "0" ]; then
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox 'Não consegui criar uma imagem do Windows.\n
O sistema operacional pode ainda não ter sido instalado.\n
A partição ou o sistema de arquivo indicados pelas variáveis\n
partwindows e sa_partwindows em /etc/avahi/services/riso.service\n
pode estar incorreta.\n' \
        0 0
        return 3
    fi
    #Atualiza Sistema de arquivo da partição no riso.service
    mount ${partwindows} /mnt
	sa_partwindows=`df -T ${partwindows} | awk 'NR==2{print $2}'`
	echo $sa_partwindows
	echo $partwindows
	sed "s/sa_partwindows=[^<]*/sa_partwindows=${sa_partwindows}/" < ${riso_service} > ${riso_service}.tmp
	umount /mnt 2> /dev/null
	
}

#Cria imagem do Windows.
cria_torrent_windows() {
	
	if [ -e ${img_win} ]; then
        btmakemetafile.bittorrent ${img_win} http://${servidor}:6969/announce 2> /dev/null
        cp $tor_win /var/www

        tam=`du -b ${img_win} | cut -f1`
        sed "s/tamwindows=[0-9]*/tamwindows=${tam}/" < ${riso_service} > ${riso_service}.tmp
	    mv ${riso_service}.tmp ${riso_service}
    else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\nVocê ainda não criou a imagem do windows.' \
        7 45
        return 2
    fi
}

#Cria imagem do SO com R.I.S.O. instalado..
cria_rec() {

	echo "Removendo imagem antiga do windows..."
	rm -f ${img_win}
	rm -f ${tor_win}
	echo "Removendo imagem antiga do linux..."
	rm -f ${img_lin}
	rm -f ${tor_lin}
	echo "Removendo imagem antiga do linux de recuperação..."
	rm -f ${img_rec}
	sfdisk -d /dev/sda > ${tab_part}
	cd /
	tar -cvf ${img_rec} *
	
	#Atualiza Sistema de arquivo da partição no riso.service
    sa_partrec=`df -T ${partrec} | awk 'NR==2{print $2}'`
    sed "s/sa_partrec=[^<]*/sa_partrec=${sa_partrec}/" < ${riso_service} > ${riso_service}.tmp
	
}

#Atualiza riso.
atualiza() {
    
    dialog \
    --ok-label 'OK' \
    --title 'ERRO' \
    --msgbox '\n   Esta versão já é a mais recente'\
    7 40
}

#Pessoas que desenvolveram esse material.
creditos() {
	
	dialog \
	--ok-label 'OK' \
	--title 'Creditos' \
	--msgbox '                                       \n
		 CENTRO FEDERAL DE EDUCAÇAO TECNOLOGICA  \n
		        Engenharia da Computaçao         \n
		                                         \n
		       Germano Teixeira de Miranda       \n
		      Cristiano Goulart Lopes Dias       \n
		    Vinicius Tinti de Paula Oliveira     \n
		        Gabriel de Souza Brandao         \n
		    Gabriel Machado de Castro Fonseca    \n
		         Marcio J. Menezes Jr.           \n
		                                         \n
		           www.dgo.cefetmg.br            \n
		                                         \n'\
		  0 0
}

#Acredite isso é um help.
helpi() {

	dialog \
	--ok-label 'OK' \
	--title 'Help' \
	--msgbox 'Envie um e-mail com suas duvidas e sugestões \n
para: "germano@comp.eng.br" e reponderei o\n
mais rápido possível.' \
		0 0
}

#Checklist de seleção.
menu_inicia_servidor() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja disponibilizar para o download na rede:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') inicia_servidor_windows;;
		'"Linux"') inicia_servidor_linux;;
		'"Windows" "Linux"') inicia_servidor;;
	esac
}

#Checklist de seleção.
menu_criar_imagens() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja criar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON  \
	Recuperacao '' off )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') cria_windows && cria_torrent_windows;;
		'"Linux"') cria_linux && cria_torrent_linux;;
		'"Recuperacao"') cria_rec;;
		'"Windows" "Linux"') cria_windows && cria_torrent_windows && cria_linux && cria_torrent_linux;;
		'"Windows" "Recuperacao"') cria_rec && cria_windows && cria_torrent_windows;;
		'"Linux" "Recuperacao"') cria_rec && cria_linux && cria_torrent_linux;;
		'"Windows" "Linux" "Recuperacao"') cria_rec && cria_windows && cria_torrent_windows && cria_linux && cria_torrent_linux;;
	esac
}

#Checklist de seleção.
menu_criar_torrents() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais torrents deseja criar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON  )

    # De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') cria_torrent_windows;;
		'"Linux"') cria_torrent_linux;;
		'"Windows" "Linux"') cria_torrent_windows && cria_torrent_linux;;
	esac
}

#Menu pricipal.
menu() {

	while : ; do
	opcao=$(
		dialog --stdout                         \
		--ok-label 'Confirmar'                  \
		--cancel-label 'Sair'                   \
		--title 'RISOS - 0.5'                   \
		--menu 'Escolha o que voce quer fazer:' \
			0 0 0                               \
			1 'Iniciar servidor'                \
			2 'Criar imagens'                   \
			3 'Criar torrents'                  \
			4 'Atualiza'                        \
			5 'Creditos'                        \
			6 'Help'                            )
	
		# ESC, sai do programa...
		[ $? -ne 0 ] && break
	
		# De acordo com a opção escolhida, executa funçao
		case $opcao in
			1) menu_inicia_servidor;;
			2) menu_criar_imagens;;
			3) menu_criar_torrents;;
			4) atualiza;;
			5) creditos;;
			6) helpi;;
		esac	

	done
}

#Verifica se usuário é root
USER=`id -u`
if [ $USER == '0' ]; then
    carrega_variaveis && menu
	clear
else
	echo 'Só o root pode fazer isso, jovenzinho!'
fi
