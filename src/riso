#!/bin/bash

#carrega variaveis do arquivo riso.service para variáveis do sistema.
carrega_variaveis() {
    avahi_saida=`avahi-browse -rtp _RISO._tcp | grep '='`
    servidor=`cut -d ';' -f8 <<< ${avahi_saida}`
    if [ -z $servidor ]; then
        dialog \
        --title 'Atencao' \
        --ok-label 'OK' \
        --msgbox 'Não existe nenhum servidor RISOS ativo na rede.\nVerifique a conexão e tente novamente.' \
        0 0
        clear
        exit 1
    fi
    partwindows=`(cut -d ';' -f10 | cut -d '"' -f2 | cut -d '=' -f2) <<< ${avahi_saida}`
    partlinux=`(cut -d ';' -f10 | cut -d '"' -f4 | cut -d '=' -f2) <<< ${avahi_saida}`
    partrec=`(cut -d ';' -f10 | cut -d '"' -f6 | cut -d '=' -f2) <<< ${avahi_saida}`
    partswap=`(cut -d ';' -f10 | cut -d '"' -f8 | cut -d '=' -f2) <<< ${avahi_saida}`   
    tamwindows=`(cut -d ';' -f10 | cut -d '"' -f10 | cut -d '=' -f2) <<< ${avahi_saida}`
    tamlinux=`(cut -d ';' -f10 | cut -d '"' -f12 | cut -d '=' -f2) <<< ${avahi_saida}`
}

#Instala imagens do Linux e do Windows.
instala() {
	#Desmonta partiçoes.
	umount $partwindows
	umount $partlinux

	#Clona windows.
	ntfsclone -r /usr/riso/imagens/windows.img -O $partwindows

	#Clona linux.
	mkfs.ext3 $partlinux
	mount $partlinux /mnt
	cd /mnt
	tar -xvf /usr/riso/imagens/linux.tar
	cd ..
	umount /mnt
}

#Instala imagem do Windows.
instala_windows() {
	#Desmonta partiçoes
	umount $partwindows

	#Clona windows
	ntfsclone -r /usr/riso/imagens/windows.img -O $partwindows
}

#Instala imagem do Linux.
instala_linux() {
	#desmonta partiçoes.
	umount $partlinux

	#clona linux
	mkfs.ext3 $partlinux
	mount $partlinux /mnt
	cd /mnt
	tar -xvf /usr/riso/imagens/linux.tar
	cd ..
	umount /mnt
}

#Baixa imagens do Linux e do Windows.
baixa_imagens() {

	clear
	
	echo "Conectando ao servidor..."
	carrega_variaveis

	#Deleta imagens antigas.
	echo "Removendo imagem antiga do windows..."
	rm /usr/riso/imagens/windows.img
	echo "Removendo imagem antiga do linux..."
	rm /usr/riso/imagens/linux.tar
	rm /usr/riso/imagens/linux.tar.torrent
	rm /usr/riso/imagens/windows.img.torrent
	

	#Baixa novas imagens.
	wget http://$servidor/windows.img.torrent -O /usr/riso/imagens/windows.img.torrent
	wget http://$servidor/linux.tar.torrent -O /usr/riso/imagens/linux.tar.torrent	
	
	cd /usr/riso/imagens/
	screen -d -m rtorrent windows.img.torrent linux.tar.torrent

	#Baixa arquivo de configuraçao atualizado.
	wget http://$servidor/riso.conf -O /usr/riso/riso.conf

	echo "Baixando imagens..."
	# Loop que aguarda o torrent ser concluido.
	# Compara o tamanho do arquivo que esta sendo baixado pelo rtorrent
	# com o tamanho total no arquivo riso.service.
	sizelocwin="0"
	sizeloclin="0"
	while [ $sizelocwin != $tamwindows -o $sizeloclin != $tamlinux ]; do
		sleep 2m
		sizelocwin=`du /usr/riso/imagens/windows.img | cut -f1`
		sizeloclin=`du /usr/riso/imagens/linux.tar | cut -f1`
	done

	#Finaliza download
	killall rtorrent
}

#baixa imagem do Windows.
baixa_imagem_windows() {

	clear
	
	echo "Conectando ao servidor..."
	carrega_variaveis

	#Deleta imagens antigas.
	echo "Removendo imagem antiga do windows..."
	rm /usr/riso/imagens/windows.img

	#Baixa novas imagens.
	wget http://$servidor/windows.img.torrent -O /usr/riso/imagens/windows.img.torrent	
	
	cd /usr/riso/imagens/
	screen -d -m rtorrent windows.img.torrent

	#Baixa arquivo de configuraçao atualizado.
	wget http://$servidor/riso.conf -O /usr/riso/riso.conf

	echo "Baixando imagens..."
	# Loop que aguarda o torrent ser concluido.
	# Compara o tamanho do arquivo que esta sendo baixado pelo rtorrent
	# com o tamanho total no arquivo riso.conf.
	sizelocwin="0"
	while [ $sizelocwin != $tamwindows ]; do
		sleep 2m
		sizelocwin=`du /usr/riso/imagens/windows.img | cut -f1`
	done

	#Finaliza download
	killall rtorrent
}

#Baixa imagem linux.
baixa_imagem_linux() {

	clear

	echo "Conectando ao servidor..."
	carrega_variaveis

	#Deleta imagens antigas.
	echo "Removendo imagem antiga do linux..."
	rm /usr/riso/imagens/linux.tar
	rm /usr/riso/imagens/linux.tar.torrent
	rm /usr/riso/imagens/windows.img.torrent
	

	#Baixa novas imagens.
	wget http://$servidor/linux.tar.torrent -O /usr/riso/imagens/linux.tar.torrent	
	
	cd /usr/riso/imagens/
	screen -d -m rtorrent linux.tar.torrent

	#Baixa arquivo de configuraçao atualizado.
	wget http://$servidor/riso.conf -O /usr/riso/riso.conf

	echo "Baixando imagens..."
	# Loop que aguarda o torrent ser concluido.
	# Compara o tamanho do arquivo que esta sendo baixado pelo rtorrent
	# com o tamanho total no arquivo riso.conf.
	sizeloclin="0"
	while [ $sizeloclin != $tamlinux ]; do
		sleep 2m

		sizeloclin=`du /usr/riso/imagens/linux.tar | cut -f1`
	done

	#Finaliza download
	killall rtorrent
}

#Instala imagem do SO com o R.I.S.O..
instala_rec() {

	#Instala imagem
	tar -xvf rec.tar
	
	#instala o grub
	chroot /sda4 grub-install /dev/sda

	#Verifica se a instalaçao foi concluida con sucesso
	if [ -e /sda4/vmlinuz ]
	then
		reboot
	else
		echo " "
		echo "      ...NOSSA!!!, o script falhou!!!...     "
		echo "...reinicie o computador e tente outra vez..."
		echo " "
	fi

}

#Baixa imagem do SO com o R.I.S.O.. 
baixa_rec() {

	echo "Conectando ao servidor..."
	carrega_variaveis

	#Baixa refaz tabela de partiçao
	wget $servidor/tab_part
	swapoff -a
	sfdisk -f /dev/sda < tab_part

	#Desmonta partiçoes
	umount $partwindows 
	umount $partlinux
	umount $partrec  
	umount $partswap

	#Formata partiçoes 
	mkfs.ext3 $partlinux
	mkfs.ext3 $partrec
	mkswap $partswap
	swapon $partswap

	#Baixa imagem.tar via scp
	mkdir /sda4
	mount $partrec /sda4
	cd /sda4
	scp root@$servidor:/usr/riso/imagens/rec.tar .
}

#Atualiza R.I.S.O..
atualiza() {
		
	ping -q -c 1 200.131.37.236 > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		wget 200.131.37.236/riso -O /usr/riso/riso
		bash /usr/riso/riso
		exit
	else
		dialog \
		--ok-label 'OK' \
		--title 'ERRO' \
		--msgbox 'Não foi possível estabelecer conexão com o servidor'\
		0 0
	fi
}

helpi() {
	dialog \
	--ok-label 'OK' \
	--title 'Help' \
	--msgbox '                                       \n
		Envie um e-mail com suas duvidas e sugestões \n
		para: "germano@comp.eng.br" e reponderei o   \n
		mais rápido possível.'                    \
		0 0
}

#Pessoas que desenvolveram esse material.
creditos() {
	dialog \
	--ok-label 'OK' \
	--title 'Creditos' \
	--msgbox '                                       \n
		 CENTRO FEDERAL DE EDUCAÇAO TECNOLOGICA  \n
		        Engenharia da Computaçao         \n
		                                         \n
		      Cristiano Goulart Lopes Dias       \n
		    Vinicius Tinti de Paula Oliveira     \n
		       Germano Teixeira de Miranda       \n
		        Gabriel de Souza Brandao         \n
		         Marcio J. Menezes Jr.           \n
		    Gabriel Machado de Castro Fonseca    \n
		                                         \n
		           www.dgo.cefetmg.br            \n
		                                         \n'\
		  0 0
}

#Checklist de seleção.
menu_instala_imagens() {
	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja instalar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON  )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') instala_windows; reboot;;
		'"Linux"') instala_linux; reboot;;
		'"Windows" "Linux"') instala; reboot;;
	esac
}

#Checklist de seleção.
menu_baixa_imagens() {
	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja baixar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') baixa_imagem_windows; instala_windows; reboot;;
		'"Linux"') baixa_imagem_linux; instala_linux; reboot;;
		'"Windows" "Linux"') baixa_imagens; instala; reboot;;
	esac
}

#Menu principal.
menu() {

	while : ; do
	opcao=$(
		dialog --stdout                                             \
		--ok-label 'Confirmar'                                      \
		--cancel-label 'Sair'                                       \
		--title 'RISO - 0.4a'                                       \
		--menu 'Escolha o que voce quer fazer:'                     \
			0 0 0                                               \
			1 'Instalar imagens ja existentes'                  \
			2 'Baixar e instalar novas imagens'                 \
			3 'Baixar e instalar imagem de recuperação(LIVE_CD)'\
			4 'Atualiza'                                        \
			5 'Creditos'                                        \
			6 'Help'                                            )
	
		# ESC, sai do programa...
		[ $? -ne 0 ] && break
	
		# De acordo com a opção escolhida, executa funçao
		case $opcao in
		1) menu_instala_imagens;;
		2) menu_baixa_imagens;;
		3) baixa_rec; instala_rec;;
		4) atualiza;;
		5) creditos;;
		6) helpi;;
	esac	

	done
}

#Avalia argumentos.
avaliar_args() {

	#Cria vetor com os argumentos recebidos
	#argumento[0] = numero de argumentos passados.
	argumento=($# $@)

	#Verifica se algum arqumento foi passado
	if [ $# = 0 ]; then
		return
	#Mostra help se requisitado
	elif [ ${argumento[1]} = "--help" ]; then
		echo "Uso: riso [OPÇÃO] [ARQUIVO]...                        "
		echo "Baixa e/ou instala imagen(s) do(s) sistema(s) operacional(s)"
		echo "                                                            "
		echo "   --baixa, baixa as imagens sucessoras                     "
		echo "       windows --imagem do windows                          "
		echo "       linux --imagem do linux                              "
		echo "       rec --imagem do sistema de recuperação               "
		echo "   --instala, instala as imagens sucessoras                 "
		echo "       windows --imagem do windows                          "
		echo "       linux --imagem do linux                              "
		echo "       rec --imagem do sistema de recuperação               "
		echo "                                                            "
		echo "A imagem de recuperação(rec) deve ser baixada e/ou instalada"
		echo "a partir de um SO externo ao HD (Ex: cd de boot).           "
		echo "                                                            "
		echo "Exemplo:                                                    "
		echo "    Baixa imagens do linux e do windows e instala a do linux"
		echo "      riso --baixa windows linux --instala linux            "
		echo "                                                            "
		echo "Comunicar \"bugs\" para <riso@comp.eng.br>               "
		exit
	#Tenta executar
	else
		#Verifica syntax 
		for i in $(seq 1 ${argumento[0]}); do
			if [ ${argumento[$i]} = "--baixa" ]; then
				until [ $i -eq ${argumento[0]} -o ${argumento[$i]} = "--instala" ]; do
					((i++))
					case ${argumento[$i]} in
						"windows") break;;
						"linux") break;;
						"rec") break;;
						*) echo "riso: Syntax ERRO"; echo "Tente \`riso --help\` para mais informações"; exit;;
					esac
				done
			elif [ ${argumento[$i]} = "--instala" ]; then
				until [ $i -eq ${argumento[0]} -o ${argumento[$i]} = "--baixa" ]; do
					((i++))
					case ${argumento[$i]} in
						"windows") break;;
						"linux") break;;
						"rec") break;;
						*) echo "riso: Syntax ERRO"; echo "Tente \`riso --help\` para mais informações"; exit;;
					esac
				done
			elif [ ${argumento[$i]} = "windows" ]; then
				continue
			elif [ ${argumento[$i]} = "linux" ]; then
				continue
			elif [ ${argumento[$i]} = "rec" ]; then
				continue
			else
				echo "riso: Syntax ERRO"
				echo "Tente \`riso --help\` para mais informações"
				exit
			fi
		done
		
		#Executa comando
		carrega_variaveis
		for i in $(seq 1 ${argumento[0]}); do
			if [ ${argumento[$i]} = "--baixa" ]; then
				until [ $i -eq ${argumento[0]} -o ${argumento[$i]} = "--instala" ]; do
					((i++))
					case ${argumento[$i]} in
						"windows") baixa_imagem_windows;;
						"linux") baixa_imagem_linux;;
						"rec") baixa_rec;;
					esac
				done
			elif [ ${argumento[$i]} = "--instala" ]; then
				until [ $i -eq ${argumento[0]} -o ${argumento[$i]} = "--baixa" ]; do
					((i++))
					case ${argumento[$i]} in
						"windows") instala_windows;;
						"linux") instala_linux;;
						"rec") instala_rec;;
					esac
				done
			elif [ ${argumento[$i]} = "windows" ]; then
				continue
			elif [ ${argumento[$i]} = "linux" ]; then
				continue
			elif [ ${argumento[$i]} = "rec" ]; then
				continue
			fi
		done
	fi
	reboot
}

USER=`id -u`
if [ $USER == '0' ]; then  
    avaliar_args $@
	menu
	clear
else
	echo 'Só o root pode fazer isso, jovenzinho!'
fi
