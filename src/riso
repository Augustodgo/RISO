#!/bin/bash

#Variáveis do script
dir_riso=/usr/riso
dir_img=$dir_riso/imagens
img_win=$dir_img/windows.img
img_lin=$dir_img/linux.tar
img_rec=$dir_img/rec.tar
tor_win=$img_win.torrent
tor_lin=$img_lin.torrent
tab_part=$dir_img/tab_part
riso_conf=$dir_riso/riso.conf

#Carrega variaveis do arquivo riso.service para variáveis do sistema.
carrega_variaveis() {

    avahi_saida=`avahi-browse -rtp _RISO._tcp | grep '='`
    servidor=`cut -d ';' -f8 <<< ${avahi_saida}` #ip do servidor.
    if [ -z $servidor ]; then
        dialog \
        --title 'Atencao' \
        --ok-label 'OK' \
        --msgbox 'Não existe nenhum servidor RISOS ativo na rede.\nVerifique a conexão e tente novamente.' \
        0 0
        return 1
    fi
    partwindows=`(cut -d ';' -f10 | cut -d '"' -f2 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição com Windows.
    partlinux=`(cut -d ';' -f10 | cut -d '"' -f4 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição com Linux.
    partrec=`(cut -d ';' -f10 | cut -d '"' -f6 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição de Recuperação.
    partswap=`(cut -d ';' -f10 | cut -d '"' -f8 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição Swap.

    #Tamanho total das imagens criadas no servidor.
    tamwindows=`(cut -d ';' -f10 | cut -d '"' -f10 | cut -d '=' -f2) <<< ${avahi_saida}`
    tamlinux=`(cut -d ';' -f10 | cut -d '"' -f12 | cut -d '=' -f2) <<< ${avahi_saida}`

    #Sistema de arquivo das partições.
    sa_partwindows=`(cut -d ';' -f10 | cut -d '"' -f14 | cut -d '=' -f2) <<< ${avahi_saida}`
    sa_partlinux=`(cut -d ';' -f10 | cut -d '"' -f16 | cut -d '=' -f2) <<< ${avahi_saida}`
    sa_partrec=`(cut -d ';' -f10 | cut -d '"' -f18 | cut -d '=' -f2) <<< ${avahi_saida}`
}

#Instala imagens do Linux e do Windows.
instala() {

    if [ -e ${img_win} -a -e ${img_lin} ]; then
		#Desmonta partiçoes.
	    umount $partwindows 2> /dev/null
	    umount $partlinux 2> /dev/null

	    #Clona windows.
	    ntfsclone -r $img_win -O $partwindows

	    #Clona linux.
	    mkfs.ext3 $partlinux
	    mount $partlinux /mnt
	    cd /mnt
	    tar -xvf $img_lin
	    cd ..
	    umount /mnt 2> /dev/null
	    
	    #verifica se desliga computador
	    desligar=`grep "DESLIGAR" riso.conf | cut -d'=' -f2`
	    if [ "$desligar" = "SIM" ]; then
	        halt
	    fi
	
	    #verifica se reinicia computador
	    reiniciar=`grep "REINICIAR" riso.conf | cut -d'=' -f2`
	    if [ "$reiniciar" = "SIM" ]; then
	        reboot
	    fi
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\n   Não existem imagens prontas.' \
		7 40
		return 5
	fi    
}

#Instala imagem do Windows.
instala_windows() {
    if [ -e ${img_win} ]; then
		#Desmonta partiçoes
	    umount $partwindows 2> /dev/null

	    #Clona windows
	    ntfsclone -r $img_win -O $partwindows
	
	    #verifica se desliga computador
	    desligar=`grep "DESLIGAR" riso.conf | cut -d'=' -f2`
	    if [ "$desligar" = "SIM" ]; then
	        halt
	    fi
	
	    #verifica se reinicia computador
	    reiniciar=`grep "REINICIAR" riso.conf | cut -d'=' -f2`
	    if [ "$reiniciar" = "SIM" ]; then
	        reboot
	    fi
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\n  Você ainda não baixou a imagem do windows.' \
		7 50
		return 5
	fi
	    
}

#Instala imagem do Linux.
instala_linux() {

    if [ -e ${img_lin} ]; then
		#desmonta partiçoes.
	    umount $partlinux 2> /dev/null

	    #clona linux
	    mkfs.ext3 $partlinux
	    mount $partlinux /mnt
	    cd /mnt
	    tar -xvf $img_lin
	    cd ..
	    umount /mnt 2> /dev/null
	    
	    #verifica se desliga computador
	    desligar=`grep "DESLIGAR" riso.conf | cut -d'=' -f2`
	    if [ "$desligar" = "SIM" ]; then
	        halt
	    fi
	
	    #verifica se reinicia computador
	    reiniciar=`grep "REINICIAR" riso.conf | cut -d'=' -f2`
	    if [ "$reiniciar" = "SIM" ]; then
	        reboot
	    fi
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\n  Você ainda não baixou a imagem do linux.' \
		7 50
		return 5
	fi
	
	    
}

#Baixa imagens do Linux e do Windows.
baixa_imagens() {
	
	echo "Conectando ao servidor..."
	carrega_variaveis || return 1

    #Vefifica se imagem do windows já é a mais recente
	sizelocwin="0"
	[ -e ${img_win} ] && sizelocwin=$(du -b ${img_win} | cut -f1)
	if [ "$sizelocwin" = "$tamwindows" ]; then
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\nA imagem do Windows no computador já é a mais recente.' \
        7 50
        return 4
    fi

    #Vefifica se imagem do linux já é a mais recente
	sizeloclin="0"
	[ -e ${img_lin} ] && sizeloclin=$(du -b ${img_lin} | cut -f1)
	if [ "$sizeloclin" = "$tamlinux" ]; then
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\n A imagem do Linux no computador já é a mais recente.' \
        7 50
        return 4
    fi

	#Deleta imagens antigas.
	echo "Removendo imagem antiga do windows..."
	rm -f $img_win
	rm -f $tor_win
	echo "Removendo imagem antiga do linux..."
	rm -f $img_lin
	rm -f $tor_lin
	
	#Inicia download das imagens em terminal virtual.
    scp root@${servidor}:${tor_win} ${tor_win}
	scp root@${servidor}:${tor_lin} ${tor_lin}
	cd ${dir_img}
	screen -d -m rtorrent ${tor_win} ${tor_lin}

    #Se usuário cancelar volta para menu.
	trap "killall rtorrent; clear; exit" 2 15

	# Loop que aguarda o torrent ser concluido.
	# Compara o tamanho do arquivo que esta sendo baixado pelo rtorrent
	# com o tamanho total no arquivo riso.service.
	(
	    sizelocwin="0"
	    sizeloclin="0"
	    total=$((tamwindows+tamlinux))
	    while [ "$sizelocwin" != "$tamwindows" -o "$sizeloclin" != "$tamlinux" ]; do
	
		    # quanto já foi copiado?
		    [ -e ${img_win} ] && sizelocwin=$(du -b ${img_win} | cut -f1)
		    [ -e ${img_lin} ] && sizeloclin=$(du -b ${img_lin} | cut -f1)
            copiado=$((sizelocwin+sizeloclin))

		    # qual a porcentagem do total?
		    PORCENTAGEM=$((copiado*100/total))
		
		    # envia a porcentagem para o dialog
		    echo $PORCENTAGEM
		
		    # aguarda até a próxima checagem
		    sleep 1
	    done	

	    # cópia finalizada, mostra a porcentagem final
	    echo 100
	
    ) | dialog --title "Baixando imagens..." --gauge "Baixando imagens do Windows e Linux do servidor RISOS para maquina local" 8 50 0

	#Finaliza download
	killall rtorrent
}

#baixa imagem do Windows.
baixa_imagem_windows() {
	
	echo "Conectando ao servidor..."
	carrega_variaveis || return 1

    #Vefifica se imagem já é a mais recente
	sizelocwin="0"
	[ -e ${img_win} ] && sizelocwin=$(du -b ${img_win} | cut -f1)
	if [ "$sizelocwin" = "$tamwindows" ]; then
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\n A imagem no computador já é a mais recente.' \
        7 50
        return 4
    fi

	#Deleta imagens antigas.
	echo "Removendo imagem antiga do windows..."
	rm -f ${img_win}
	rm -f ${tor_win}

	#Inicia download da imagen em terminal virtual.
	scp root@${servidor}:${tor_win} ${tor_win}
	cd $dir_img
	screen -d -m rtorrent $tor_win
	
	#Se usuario cancelar volta para menu.
	trap "killall rtorrent; clear; exit" 2 15

	# Loop que aguarda o torrent ser concluido.
	# Compara o tamanho do arquivo que esta sendo baixado pelo rtorrent
	# com o tamanho total do arquivo em riso.service.
    (
	    sizelocwin="0"
	    while [ "$sizelocwin" != "$tamwindows" ]; do
	
		    # quanto já foi copiado?
		    [ -e ${img_win} ] && sizelocwin=$(du -b $img_win | cut -f1)

		    # qual a porcentagem do total?
		    PORCENTAGEM=$((sizelocwin*100/tamwindows))
		
		    # envia a porcentagem para o dialog
		    echo $PORCENTAGEM
		
		    # aguarda até a próxima checagem
		    sleep 1
	    done	

	    # cópia finalizada, mostra a porcentagem final
	    echo 100
	
    ) | dialog --title "Baixando imagem..." --gauge "Baixando imagem do Windows do servidor RISOS para maquina local" 8 50 0

	#Finaliza download
	killall rtorrent
}

#Baixa imagem linux.
baixa_imagem_linux() {

	echo "Conectando ao servidor..."
	carrega_variaveis || return 1
	
    #Vefifica se imagem já é a mais recente
	sizeloclin="0"
	[ -e ${img_lin} ] && sizeloclin=$(du -b ${img_lin} | cut -f1)
	if [ "$sizeloclin" = "$tamlinux" ]; then
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\n A imagem no computador já é a mais recente.' \
        7 50
        return 4
    fi

	#Deleta imagens antigas.
	echo "Removendo imagem antiga do linux..."
	rm -f ${img_lin}
	rm -f ${tor_lin}

    #Inicia download da imagen em terminal virtual.
	scp root@${servidor}:${tor_lin} ${tor_lin}
	cd ${dir_img}
	screen -d -m rtorrent ${tor_lin}
	
	#Se usuário cancelar volta para menu.
	trap "killall rtorrent; clear; exit" 2 15

    # Loop que aguarda o torrent ser concluido.
	# Compara o tamanho do arquivo que esta sendo baixado pelo rtorrent
	# com o tamanho total do arquivo em riso.service.
    (
	    sizeloclin="0"
	    while [ "$sizeloclin" != "$tamlinux" ]; do
	
		    # quanto já foi copiado?
		    [ -e ${img_lin} ] && sizeloclin=$(du -b ${img_lin} | cut -f1)

		    # qual a porcentagem do total?
		    PORCENTAGEM=$((sizeloclin*100/tamlinux))
		
		    # envia a porcentagem para o dialog
		    echo $PORCENTAGEM
		
		    # aguarda até a próxima checagem
		    sleep 1
	    done	

	    # cópia finalizada, mostra a porcentagem final
	    echo 100
	
    ) | dialog --title "Baixando imagem..." --gauge "Baixando imagem do Linux do servidor RISOS para maquina local" 8 50 0

	#Finaliza download
	killall rtorrent
}

#Instala imagem do SO com o R.I.S.O..
instala_rec() {

	#Instala imagem
	tar -xvf rec.tar
	
	#instala o grub
	chroot /mnt grub-install /dev/sda

	#Verifica se a instalaçao foi concluida con sucesso
	if [ -e /mnt/vmlinuz ]
	then
	    clear
		reboot
	else
		echo " "
		echo "      ...NOSSA!!!, o script falhou!!!...     "
		echo "...reinicie o computador e tente outra vez..."
		echo " "
	fi

}

#Baixa imagem do SO com o R.I.S.O.. 
baixa_rec() {

	echo "Conectando ao servidor..."
	carrega_variaveis || return 1

	#Baixa refaz tabela de partiçao
	scp root@${servidor}:${tab_part} ${tab_part}
	swapoff -a
	sfdisk -f /dev/sda < ${tab_part}

	#Desmonta partição
	umount ${partrec} 2> /dev/null 

	#Formata partição 
	mkfs.${sa_partrec} ${partrec}
	mkswap ${partswap}
	swapon ${partswap}

	#Baixa imagem .tar via scp
	umount /mnt 2> /dev/null
	mount ${partrec} /mnt
	cd /mnt
	scp root@${servidor}:${img_rec} .
}

#Define configurações do riso
configuracoes() {
    dialog                                          \
    --title 'AVISO'                              \
    --yesno '\nAlterar esse arquivo é potencialmente
             perigoso, se não souber o que esta fazendo pare agora.\n\nDeseja continuar?'    \
    0 0
    if [ "$?" -eq "0" ]; then
		nano $riso_conf
	fi

}

#Atualiza R.I.S.O..
atualiza() {
		
	ping -q -c 1 200.131.37.236 > /dev/null 2>&1
	if [ "$?" -eq "0" ]; then
		wget 200.131.37.236/riso -O /usr/riso/riso
		bash /usr/riso/riso
		exit
	else
		dialog \
		--ok-label 'OK' \
		--title 'ERRO' \
		--msgbox '\n   Esta versão já é a mais recente'\
		7 40
	fi
}

helpi() {
	dialog \
	--ok-label 'OK' \
	--title 'Help' \
	--msgbox '                                       \n
		Envie um e-mail com suas duvidas e sugestões \n
		para: "riso@comp.eng.br" e reponderei o   \n
		mais rápido possível.'                    \
		0 0
}

#Pessoas que desenvolveram esse material.
creditos() {

	dialog \
	--ok-label 'OK' \
	--title 'Creditos' \
	--msgbox '                                       \n
		 CENTRO FEDERAL DE EDUCAÇAO TECNOLOGICA  \n
		        Engenharia da Computaçao         \n
		                                         \n
		      Cristiano Goulart Lopes Dias       \n
		    Vinicius Tinti de Paula Oliveira     \n
		       Germano Teixeira de Miranda       \n
		        Gabriel de Souza Brandao         \n
		         Marcio J. Menezes Jr.           \n
		    Gabriel Machado de Castro Fonseca    \n
		    André Paulista Gordinho da Silva     \n
		                                         \n
		           www.dgo.cefetmg.br            \n
		                                         \n'\
		  0 0
}

#Checklist de seleção.
menu_instala_imagens() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja instalar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON  )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') instala_windows;;
		'"Linux"') instala_linux;;
		'"Windows" "Linux"') instala;;
	esac
}

#Checklist de seleção.
menu_baixa_imagens() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja baixar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') baixa_imagem_windows && instala_windows;;
		'"Linux"') baixa_imagem_linux && instala_linux;;
		'"Windows" "Linux"') baixa_imagens && instala;;
	esac
}

#Menu principal.
menu() {

	while : ; do
	opcao=$(
		dialog --stdout                                         \
		--ok-label 'Confirmar'                                  \
		--cancel-label 'Sair'                                   \
		--title 'RISO - 0.5'                                    \
		--menu 'Escolha o que voce quer fazer:'                 \
			0 0 0                                               \
			1 'Instalar imagens ja existentes'                  \
			2 'Baixar e instalar novas imagens'                 \
			3 'Baixar e instalar imagem de recuperação(LIVE_CD)'\
			4 'Atualiza'                                        \
			5 'Configurações'                                   \
			6 'Creditos'                                        \
			7 'Help'                                            )
	
		# ESC, sai do programa...
		[ $? -ne 0 ] && break
	
		# De acordo com a opção escolhida, executa funçao
		case $opcao in
		1) menu_instala_imagens;;
		2) menu_baixa_imagens;;
		3) baixa_rec; instala_rec;;
		4) atualiza;;
		5) configuracoes;;
		6) creditos;;
		7) helpi;;
	esac	

	done
}

#Avalia argumentos.
avaliar_args() {

	#Cria vetor com os argumentos recebidos
	#argumento[0] = numero de argumentos passados.
	argumento=($# $@)

	#Verifica se algum arqumento foi passado
	if [ $# = 0 ]; then
		return
	#Mostra help se requisitado
	elif [ ${argumento[1]} = "--help" ]; then
		echo "Uso: riso [OPÇÃO] [ARQUIVO]...                        "
		echo "Baixa e/ou instala imagen(s) do(s) sistema(s) operacional(s)"
		echo "                                                            "
		echo "   --baixa, baixa as imagens sucessoras                     "
		echo "       windows --imagem do windows                          "
		echo "       linux --imagem do linux                              "
		echo "       rec --imagem do sistema de recuperação               "
		echo "								  "
		echo "   --instala, instala as imagens sucessoras                 "
		echo "       windows --imagem do windows                          "
		echo "       linux --imagem do linux                              "
		echo "       rec --imagem do sistema de recuperação               "
		echo "                                                            "
		echo "A imagem de recuperação(rec) deve ser baixada e/ou instalada"
		echo "a partir de um SO externo ao HD (Ex: cd de boot).           "
		echo "                                                            "
		echo "Exemplo:                                                    "
		echo "    Baixa imagens do linux e do windows e instala a do linux"
		echo "      riso --baixa windows linux --instala linux            "
		echo "                                                            "
		echo "Comunicar \"bugs\" para <riso@comp.eng.br>               "
		exit
	#Tenta executar
	else
		#Verifica syntax 
		for i in $(seq 1 ${argumento[0]}); do
			if [ ${argumento[$i]} = "--baixa" ]; then
				until [ $i -eq ${argumento[0]} -o ${argumento[$i]} = "--instala" ]; do
					((i++))
					case ${argumento[$i]} in
						"windows") break;;
						"linux") break;;
						"rec") break;;
						*) echo "riso: Syntax ERRO"; echo "Tente \`riso --help\` para mais informações"; exit;;
					esac
				done
			elif [ ${argumento[$i]} = "--instala" ]; then
				until [ $i -eq ${argumento[0]} -o ${argumento[$i]} = "--baixa" ]; do
					((i++))
					case ${argumento[$i]} in
						"windows") break;;
						"linux") break;;
						"rec") break;;
						*) echo "riso: Syntax ERRO"; echo "Tente \`riso --help\` para mais informações"; exit;;
					esac
				done
			elif [ ${argumento[$i]} = "windows" ]; then
				continue
			elif [ ${argumento[$i]} = "linux" ]; then
				continue
			elif [ ${argumento[$i]} = "rec" ]; then
				continue
			else
				echo "riso: Syntax ERRO"
				echo "Tente \`riso --help\` para mais informações"
				exit
			fi
		done
		
		#Executa comando
		carrega_variaveis || return 1
		for i in $(seq 1 ${argumento[0]}); do
			if [ ${argumento[$i]} = "--baixa" ]; then
				until [ $i -eq ${argumento[0]} -o ${argumento[$i]} = "--instala" ]; do
					((i++))
					case ${argumento[$i]} in
						"windows") baixa_imagem_windows;;
						"linux") baixa_imagem_linux;;
						"rec") baixa_rec;;
					esac
				done
			elif [ ${argumento[$i]} = "--instala" ]; then
				until [ $i -eq ${argumento[0]} -o ${argumento[$i]} = "--baixa" ]; do
					((i++))
					case ${argumento[$i]} in
						"windows") instala_windows;;
						"linux") instala_linux;;
						"rec") instala_rec;;
					esac
				done
			elif [ ${argumento[$i]} = "windows" ]; then
				continue
			elif [ ${argumento[$i]} = "linux" ]; then
				continue
			elif [ ${argumento[$i]} = "rec" ]; then
				continue
			fi
		done
	fi
	reboot
}

#Verifica se usuário é root
USER=`id -u`
if [ $USER == '0' ]; then  
    avaliar_args $@
	menu
	clear
else
	echo 'Só o root pode fazer isso, jovenzinho!'
fi
